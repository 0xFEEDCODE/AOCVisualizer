@page "/Pathfinding"

<div id="page">
    <PageTitle>Pathfinding</PageTitle>

    <h2>-- Pathfinding --</h2>

    <h3>Grid Dimensions</h3>
    <label>Width: </label> <input type="text" class="text-input" @bind="width"/>
    <label>Height: </label> <input type="text" class="text-input" @bind="height"/>
    <br>

    <h3>Parameters</h3>

    <label>Algorithm</label>
    <br>
    <select>
        <option value="bfs">Breadth First Search [BFS]</option>
        <option value="dfs">Depth First Search [DFS]</option>
    </select>

    <br>
    <br>

    <label>Start</label>
    <br>
    <label>X: </label> <input type="text" class="text-input-short" @bind="startX"/>
    <label>Y: </label> <input type="text" class="text-input-short" @bind="startY"/>
    <br>

    <br>
    <button @onclick="ShowModal">Points to visit in between</button>
    <br>

    @if (isModalVisible)
    {
        <div id="modal" class="modal" @onclick="CloseModal">
            <div class="modal-content" @onclick:stopPropagation>
                <button class="close" @onclick="CloseModal">X</button>

                <label>X: </label> <input type="text" class="text-input-short" @bind="betweenX"/>
                <label>Y: </label> <input type="text" class="text-input-short" @bind="betweenY"/>
                <button @onclick="() => AddPoint(betweenX, betweenY)">Add</button>

                <ul class="list-points-to-visit">
                    @foreach (var point in PointsToVisitInBetween)
                    {
                        <li>@point.X; @point.Y <button @onclick="() => RemovePoint(point)">Remove</button>
                        </li>
                    }
                </ul>
            </div>
        </div>
    }
    <br>

    <label>End</label>
    <br>
    <label>X: </label> <input type="text" class="text-input-short" @bind="endX"/>
    <label>Y: </label> <input type="text" class="text-input-short" @bind="endY"/>
    <br>
    <br>

    <label>Scale: </label> <input type="range" min="0.5" max="2" step="0.1" @bind="gridScale"/>
    <br>

    <label>Steps: </label> <input type="range" min="0.1" max="100"/>
    <br>

    <div class="grid-container" style="width: @(width * 32 * gridScale)px; height: @(height * 32 * gridScale)px;">
        <div class="grid" style="grid-template-columns: repeat(@width, @(32 * gridScale)px); grid-template-rows: repeat(@height, @(32 * gridScale)px);">
            @foreach (var cell in GenerateGrid().SelectMany(row => row))
            {
                <div class="cell @cell.Class" style="width: @(32 * gridScale)px; height: @(32 * gridScale)px;"></div>
            }
        </div>
    </div>
</div>

@code {

    record struct Point2D(int X, int Y);

    private double gridScale = 1;

    private int width;
    private int height;

    private int startX;
    private int startY;
    private int betweenX;
    private int betweenY;
    private int endX;
    private int endY;

    private readonly List<Point2D> PointsToVisitInBetween = [];

    private bool isModalVisible;

    private void RemovePoint(Point2D point)
    {
        PointsToVisitInBetween.Remove(point);
    }

    private bool AddPoint(int x, int y)
    {
        var point = new Point2D(x, y);
        if (PointsToVisitInBetween.Contains(point))
        {
            return false;
        }

        PointsToVisitInBetween.Add(point);
        return true;
    }

    private void ShowModal()
    {
        betweenX = 0;
        betweenY = 0;
        isModalVisible = true;
    }

    private void CloseModal()
    {
        isModalVisible = false;
    }

    private class Cell
    {
        public int X { get; set; }
        public int Y { get; set; }
        public string Class { get; init; }
    }

    private List<List<Cell>> GenerateGrid()
    {
        var grid = new List<List<Cell>>();
        for (var y = 0; y < height; y++)
        {
            var row = new List<Cell>();
            for (var x = 0; x < width; x++)
            {
                var p = new Point2D(x, y);
                var cellClass = "cell";
                if (p.X == startX && p.Y == startY)
                {
                    cellClass = "cell-start";
                }
                else if (p.X == endX && p.Y == endY)
                {
                    cellClass = "cell-end";
                }
                else if (PointsToVisitInBetween.Contains(p))
                {
                    cellClass = "cell-to-visit";
                }

                row.Add(new Cell { X = x, Y = y, Class = cellClass });
            }

            grid.Add(row);
        }

        return grid;
    }

}